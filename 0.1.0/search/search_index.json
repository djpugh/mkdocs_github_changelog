{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>mkdocs extension to autogenerate changelogs from github releases.</p> <p>An <code>mkdocs</code> equivalent     to sphinx_github_changelog.</p>"},{"location":"#why","title":"Why?","text":"<p>Easy releasing is key for rapid and robust software development. We use tag based releases, but want an easy way to generate the changelog automatically, enter release drafter and GitHub Releases.</p> <p>Release drafter allows you to generate draft releases from your pull requests, and then use the release to generate the tag automatically, and include the release changelog in the release body. Assuming you've got good pull release hygiene, you can cut a new release by editing the draft GitHub Release and then pressing \"Publish Release\".</p> <p><code>mkdocs_github_changelog</code> can then be used to generate the changelog in the <code>mkdocs</code> documentation automatically and without needing another commit.</p>"},{"location":"#using-mkdocs_github_changelog","title":"Using mkdocs_github_changelog","text":""},{"location":"#configuration","title":"Configuration","text":"<p>In the <code>mkdocs.yml</code> file, add the plugin and any configuration options to override the defaults:</p> <pre><code>plugins:\n    ...\n    - mkdocs_github_changelog:\n        token: !ENV GITHUB_TOKEN\n        # Github token (needs repo scope for private repos, and may be worth setting for public repos due to rate limiting).\n        github_api_url: &lt;url&gt;\n        # URL for github api endpoint if not standard github.com (This is not tested on github enterprise server).\n        release_template: &lt;jinja2 str&gt;\n        # Jinja2 template string to override the default.\n        match: '[0-9+].[0-9+].[0-9]+'\n        # Regex string for matching the rleease name.\n        autoprocess: True\n        # Autoprocess the body for user and issue/pull request links\n        enabled: True\n        # Enable or disable the plugin.\n</code></pre> <p>Info</p> <p>The Github token can also be set through the <code>GITHUB_TOKEN</code> or <code>GITHUB_JWT_TOKEN</code> environment values (the client used for the api is <code>ghapi</code>)</p> <p>Then in the file you want to implement the changelog (e.g. <code>changelog.md</code>):</p> <pre><code>markdown\n\n::github-release-changelog &lt;org&gt;\\&lt;repo&gt;\n    base_indent: 2\n    token: !ENV GITHUB_TOKEN\n    github_api_url: &lt;url&gt;\n    release_template: &lt;jinja2 str&gt;\n    match: '[0-9+].[0-9+].[0-9]+'\n    autoprocess: true\n</code></pre> <p>All of the options are optional when configuring, and the indent level can be set by using <code>#</code> in front of the <code>::github-release-changelog</code> line like normal markdown headings, but the <code>base_indent</code> option will override this.</p> <p>The remaining optins can override/set the value specifically for that command (if you have multiple changelogs).</p>"},{"location":"#link-autoprocesing","title":"Link autoprocesing","text":"<p>The body is autoprocessed to convert <code>@&lt;username&gt;</code> and <code>#&lt;issue&gt;</code> to github links into the repo unless the <code>autoprocess</code> config is set to false in the global or local config.</p>"},{"location":"#setting-the-template","title":"Setting the template","text":"<p>The <code>release_template</code> option sets a <code>jinja2</code> template string to format the <code>github</code> <code>release</code> object (from the array of releases).</p> <p>The default template should be good, but if you have specific needs, you can create a custom template and define it in either the global or local config. The release object is passed in as <code>release</code>:</p> <pre><code>\"# [{{release.name}}]({{release.html_url}})\\n*Released at {{release.published_at.isoformat()}}*\\n\\n{{release.body}}\"\n</code></pre>"},{"location":"#jinja-environment-customisation","title":"Jinja Environment Customisation","text":"<p>If you need specific extensions in the jinja environment, you can add them in using a json encoded list on the <code>MKDOCS_GITHUB_CHANGELOG_JINJA_EXTENSIONS</code> environment variables.</p> <p>You can also customise the jinja2 environment initialisation through the <code>[project.entry-points.\"mkdocs_github_changelog.jinja_environment_factory\"]</code> entrypoint, and then setting the <code>MKDOCS_GITHUB_CHANGELOG_JINJA_ENVIRONMENT_FACTORY</code> environment variable to the name of the entrypoint.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#010","title":"0.1.0","text":"<p>Released at 2023-12-26T18:50:27+00:00 </p>"},{"location":"changelog/#changes","title":"Changes","text":""},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<p>- Initial Functionality to create changelog from github release @djpugh (#1)\r </p>"},{"location":"developing/","title":"Contributing to mkdocs_github_changelog","text":"<p>We love contributions to <code>mkdocs_github_changelog</code></p>"},{"location":"developing/#issues","title":"Issues","text":"<p>Please raise issues, queries or discussions here.</p>"},{"location":"developing/#contributing-to-the-codebase","title":"Contributing to the codebase","text":""},{"location":"developing/#installation-and-setup","title":"Installation and setup","text":"<p>Make sure you have the prerequisites installed (for adding code): * Python (Versions from 3.8) * virtualenv or another virtual environment tool * git</p> <p>Create and activate a virtual environment.</p> <p>Install <code>mkdocs_github_changelog</code>:</p> <pre><code># Install mkdocs_github_changelog as an editable install with the dev dependencies\npip install -e \".[dev]\"\n</code></pre> <p>The codebase uses <code>pre-commit</code>, so please use <code>pre-commit install</code> and <code>pre-commit install-hooks</code> to make sure the pre-commit hooks are installed correctly.</p>"},{"location":"developing/#checkout-a-branch-and-make-changes","title":"Checkout a branch and make changes","text":"<p>Create a branch to make  your changes in: <pre><code># Checkout a new branch and make your changes\ngit checkout -b my-branch\n# Make your changes...\n</code></pre></p>"},{"location":"developing/#run-tests-and-linting","title":"Run tests and linting","text":"<p><code>mkdocs_github_changelog</code> uses <code>nox</code> for running tests. <pre><code># You can either use session tags with the -s flag\nnox -s test lint\n# There are also sessions: security, types, pre-commit\n\n# or the -t lint and test tags\nnox -t lint\n# This includes lint, pre-commit, security (bandit and pipenv check), types\n\nnox -t test\n</code></pre></p>"},{"location":"developing/#build-docs","title":"Build docs","text":"<p>If you have edited the docs (or signatures/classes), please check the docs: <pre><code>nox -t docs\n</code></pre></p> <p>They will be output to <code>build/docs</code></p>"},{"location":"developing/#commit-and-push-your-changes","title":"Commit and push your changes","text":"<p>Commit your changes, push your branch, and create a pull request to the main mkdocs_github_changelog repo, and please include clear information in the pull request for review.</p>"},{"location":"developing/license/","title":"License","text":"<p><code>mkdocs_github_changelog</code> is licensed under the MIT License</p> <pre><code>MIT License\n\nCopyright (c) 2023 mkdocs_github_changelog Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"coverage/","title":"Test Coverage","text":""}]}